/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainWindow.java
 *
 * Created on May 7, 2011, 12:44:23 AM
 */

package com.cyclonephp.jgit.ui;

import com.cyclonephp.jgit.AppRuntime;
import com.cyclonephp.jgit.model.Branch;
import com.cyclonephp.jgit.model.Commit;
import com.cyclonephp.jgit.reader.BranchListListener;
import com.cyclonephp.jgit.reader.CommitListListener;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileFilter;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JFileChooser;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.ListModel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author crystal
 */
public class MainWindow extends javax.swing.JFrame 
            implements BranchListListener, CommitListListener, ActionListener {

    /** Creates new form MainWindow */
    public MainWindow() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lstBranches = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCommits = new javax.swing.JTable();
        jToolBar1 = new javax.swing.JToolBar();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mnuOpen = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lstBranches.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstBranchesValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstBranches);

        tblCommits.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Hash", "Message", "Author", "Committer"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblCommits);

        jToolBar1.setRollover(true);

        jMenu1.setText("File");

        mnuOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        mnuOpen.setText("Open Repository");
        mnuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuOpenActionPerformed(evt);
            }
        });
        jMenu1.add(mnuOpen);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 896, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(141, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 767, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 612, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(25, 25, 25)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 618, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mnuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuOpenActionPerformed
        JFileChooser chooser = new JFileChooser();
        if (AppRuntime.getDir() != null) {
            chooser.setSelectedFile(AppRuntime.getDir());
        }
        chooser.setFileFilter(new javax.swing.filechooser.FileFilter() {

            public boolean accept(File file) {
                if (!file.isDirectory()) {
                    return false;
                }
                boolean found = false;
                for (File sub : file.listFiles()) {
                    if (sub.getName().equals(".git") && sub.isDirectory()) {
                        found = true;
                        break;
                    }
                }
                return found;
            }

            @Override
            public String getDescription() {
                return "Git repositories";
            }
        });
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY );
        int rval = chooser.showOpenDialog(jMenu1);
        if (rval == JFileChooser.APPROVE_OPTION) {
            AppRuntime.setDir(chooser.getSelectedFile());
            AppRuntime.getCurrentRepoReader().addBranchListListener(this);
            AppRuntime.getCurrentRepoReader().readRepository();
        }
    }//GEN-LAST:event_mnuOpenActionPerformed

    private void lstBranchesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstBranchesValueChanged
        AppRuntime.getCurrentRepoReader()
                .addCommitListListener(this);
        System.out.println(lstBranches.getSelectedValue() + " selected");
        AppRuntime.getCurrentRepoReader()
                .readCommits((Branch) lstBranches.getSelectedValue());
}//GEN-LAST:event_lstBranchesValueChanged

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JList lstBranches;
    private javax.swing.JMenuItem mnuOpen;
    private javax.swing.JTable tblCommits;
    // End of variables declaration//GEN-END:variables


    public void branchListUpdated(List<Branch> branches) {
        DefaultListModel model = new DefaultListModel();
        model.clear();
        for (Branch branch: branches) {
            model.addElement(branch);
        }
        lstBranches.setModel(model);
    }

    public void commitListUpdated(List<Commit> commits) {
        DefaultTableModel model = (DefaultTableModel) tblCommits.getModel();
        while(model.getRowCount() > 0) {
            model.removeRow(0);
        }
        for (Commit commit: commits) {
            model.addRow(new Object[]{commit.getHash(), commit.getMessage(), commit.getAuthor(), commit.getCommitter()});
        }
    }

    public void actionPerformed(ActionEvent e) {
    
    }
}
